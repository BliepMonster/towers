let upgrades = {
    "f1": {
        category: "Fame",
        title: "Fame Multiplier",
        desc: "Increase Fame gain by ×2, compounding.",
        disp(x) { return "×" + format(this.effect(x), 0); },
        max: EN("ee1000"),
        costType: "points",
        cost(x) { return EN(1500).mul(EN.pow(3, x.pow(1.2))); },
        inv(x) { return x.div(1500).logBase(3).root(1.2).floor().max(-1); },
        effect(x) { return EN.pow(2, x); },
    },
    "f1_1": {
        category: "Fame",
        title: "Fame Exponent",
        desc: "Increase Fame gain by ^+0.05, additively.",
        disp(x) { return "^" + format(this.effect(x)); },
        max: EN(2e16),
        costType: "points",
        cost(x) { return EN(500).pow(EN.pow(1.12, x)).mul(10); },
        inv(x) { return x.div(10).logBase(500).logBase(1.12).floor().max(-1); },
        effect(x) { return EN.mul(0.05, x).add(1); },
    },
    "f1_2": {
        category: "Fame",
        title: "Fame Exponent II",
        desc: "Increase Power in Fame gain formula by ^+0.05.",
        req: ["f2", 30],
        tease: "Unlocks at Realm Level 31",
        teaseReq: ["f2", 6],
        disp(x) { return "^" + format(this.effect(x)); },
        max: EN(2e31),
        costType: "points",
        cost(x) { return EN(1e15).pow(EN.pow(1.12, x)).mul(1e18); },
        inv(x) { return x.div(1e18).logBase(1e15).logBase(1.12).floor().max(-1); },
        effect(x) { return EN.mul(0.05, x).add(1); },
    },
    "f2": {
        category: "Realm",
        title: "Realm Level",
        desc: "Make levels slightly bigger and spawn more enemies.",
        disp(x) { return "Level " + format(x.add(1), 0); },
        costType: "points",
        cost(x) { return EN(2500).tetrate(x.div(100).add(1)); },
        inv(x) { return x.slog(2500).sub(1).mul(100).floor().max(-1); },
    },
    "f2_1": {
        category: "Realm",
        title: "Starting Power",
        desc: "Increase your Power at the start of each level by +2.",
        req: ["f2", 6],
        tease: "Unlocks at Realm Level 7",
        disp(x) { return format(this.effect(x), 0); },
        costType: "points",
        cost(x) { return EN(100000).mul(EN.pow(1.5, x)); },
        inv(x) { return x.div(100000).logBase(1.5).floor().max(-1); },
        effect(x) { return x.mul(2).add(10); },
    },
    "f2_2": {
        category: "Realm",
        title: "Enemy Growth Factor",
        desc: "Make enemies scale faster by ×+0.01.",
        req: ["f2", 30],
        tease: "Unlocks at Realm Level 31",
        teaseReq: ["f2", 6],
        max: EN(50),
        disp(x) { return "×" + format(this.effect(x).add(1)); },
        costType: "points",
        cost(x) { return EN(1e9).pow(EN.pow(1.12, x)).mul(1e24); },
        inv(x) { return x.div(1e24).logBase(1e9).logBase(1.12).floor().max(-1); },
        effect(x) { return x.mul(0.01).add(.5); },
    },
    "f2_3": {
        category: "Realm",
        title: "Loot Chance",
        desc: "Increase chances of spawning a Loot by +0.25%.",
        req: ["f2", 51],
        tease: "Unlocks at Realm Level 52",
        teaseReq: ["f2", 30],
        max: EN(40),
        disp(x) { return format(this.effect(x).mul(100)) + "%"; },
        costType: "points",
        cost(x) { return EN(1e30).pow(EN.pow(1.14, x)).mul(1e150); },
        inv(x) { return x.div(1e150).logBase(1e30).logBase(1.14).floor().max(-1); },
        effect(x) { return EN.mul(0.0025, x); },
        onBuy() {
            lootbox.classList.remove("hidden");
        },
    },
    "f3": {
        category: "Loot",
        title: "Fame to Loot",
        desc: "Increase Loot gain by ×+0.5, additively.",
        req: ["f2_3", 1],
        max: EN(998),
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "points",
        cost(x) { return EN("e500").mul(EN.pow(1e10, x.pow(1.25))); },
        inv(x) { return x.div("e500").logBase(1e10).root(1.25).floor().max(-1); },
        effect(x) { return x.mul(0.5).add(1); },
    },
    "f3_1": {
        category: "Loot",
        title: "Fame Exp. to Loot",
        desc: "Fame Exponent multiplies Loot gain.",
        isBool: true,
        req: ["f2", 117],
        tease: "Unlocks at Realm Level 118",
        teaseReq: ["l3"],
        disp(x) { return ""; },
        costType: "points",
        cost(x) { return EN("ee13"); },
    },
    "f3_2": {
        category: "Loot",
        title: "Fame Exp. II to Loot",
        desc: "Fame Exponent II multiplies Loot gain.",
        req: ["f2", 117],
        isBool: true,
        disp(x) { return ""; },
        costType: "points",
        cost(x) { return EN("ee50"); },
    },

    
    "l1": {
        category: "Fame",
        title: "Loot to Fame",
        desc: "Increase Fame gain by ×5, before Fame Exponent.",
        max: EN(150),
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(10).mul(EN.pow(1.5, x)); },
        inv(x) { return x.div(10).logBase(1.5).floor().max(-1); },
        effect(x) { return EN.pow(5, x); },
    },
    "l1_1": {
        category: "Fame",
        title: "Loot to Fame II",
        desc: "Increase Fame gain by ^+0.01, additively.",
        max: EN(80),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(1000).mul(EN.pow(2, x)); },
        inv(x) { return x.div(1000).logBase(2).floor().max(-1); },
        effect(x) { return EN.mul(0.01, x).add(1); },
    },
    "l2": {
        category: "Loot",
        title: "Loot Multiplier",
        desc: "Increase amount of Loot that can be spawned by ×2.",
        max: EN("10^^9"),
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(100).mul(EN.pow(4, x)); },
        inv(x) { return x.div(100).logBase(4).floor().max(-1); },
        effect(x) { return EN.pow(2, x); },
    },
    "l2_1": {
        category: "Loot",
        title: "Base Loot",
        desc: "Increase the base Loot modifier by +10.",
        max: EN("10^^10"),
        req: ["l3"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(10000000).mul(EN.pow(1.25, x)); },
        inv(x) { return x.div(10000000).logBase(1.25).floor().max(-1); },
        effect(x) { return EN.mul(10, x).add(100); },
    },
    "l2_2": {
        category: "Loot",
        title: "Random Loot",
        desc: "Increase the random Loot modifier by +10.",
        max: EN("10^^10"),
        req: ["l3"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(10000000).mul(EN.pow(1.2, x)); },
        inv(x) { return x.div(10000000).logBase(1.2).floor().max(-1); },
        effect(x) { return EN.mul(10, x).add(100); },
    },
    "l3": {
        category: "Abilities",
        title: "Safepoints",
        desc: "You start at the start of the tower instead of the level when died.",
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(2500000); },
    },
    "l3_1": {
        category: "Abilities",
        title: "Absorb Bonus",
        desc: "Gain an extra ^x of enemies' Power when killed.",
        max: EN(100),
        req: ["l3"],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(2500000).mul(EN.pow(1.2, x)); },
        inv(x) { return x.div(2500000).logBase(1.2).floor().max(-1); },
        effect(x) { return EN.mul(0.02, x); },
    },
    "l3_2": {
        category: "Abilities",
        title: "Enemy Absorb Factor",
        desc: "x% of Absorb Bonus affect Enemy Growth Factor.",
        max: EN(99),
        req: ["l3"],
        disp(x) { return format(this.effect(x).mul(100), 0) + "%"; },
        costType: "loot",
        cost(x) { return EN(50000000).mul(EN.pow(1.4, x)); },
        inv(x) { return x.div(50000000).logBase(1.4).floor().max(-1); },
        effect(x) { return EN.mul(0.01, x); },
    },
    "l3_3": {
        category: "Fame",
        title: "Fame Duplicator",
        desc: "^x of Loot gain multiplies your current Fame.",
        max: EN(100),
        req: ["l3"],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(1e9).mul(EN.pow(1.4, x)); },
        inv(x) { return x.div(1e9).logBase(1.4).floor().max(-1); },
        effect(x) { return EN.mul(0.2, x).pow(x.max(10).sub(9.5).mul(2)); },
    },
    "l3_4": {
        category: "Abilities",
        title: "Bulldozer",
        desc: "Unlock Bricks. You gain Bricks per tower cell when you complete a level.",
        req: ["f2", 151],
        tease: "Unlocks at Realm Level 152",
        teaseReq: ["f2", 116],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e20); },
        onBuy() {
            brickbox.classList.remove("hidden");
        },
    },
    "l3_5": {
        category: "Abilities",
        title: "Free Fame Upgrades",
        desc: "Fame Upgrades are no longer priced.",
        req: ["l3_4"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e60); },
    },
    "l3_6": {
        category: "Abilities",
        title: "Fame Operator Up",
        desc: "Fame gained from completing levels are multiplied instead of added.",
        req: ["l3_5"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e150); },
    },
    "l3_7": {
        category: "Abilities",
        title: "Absorb Operator Up",
        desc: "Absorbing multiplies your Fame instead of added.",
        req: ["l3_6"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN("e16000"); },
    },
    
    "b1": {
        category: "Fame",
        title: "Bricks to Fame",
        desc: "Raises Fame gain by ^1.5, compounding.",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(20).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 20, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 20, 10, x) },
        effect(x) { return EN.pow(1.5, x); },
    },
    "b2": {
        category: "Loot",
        title: "Bricks to Loot",
        desc: "Increase Loot gain by ×1.5, compounding.",
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(20).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 20, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 20, 10, x) },
        effect(x) { return EN.pow(1.5, x); },
    },
    "b3": {
        category: "Bricks",
        title: "Brick Power",
        desc: "^x of log(log(Power)) multiplies Brick gain.",
        max: EN(40),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(100).mul(EN.pow(1.1, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.1, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.1, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_1": {
        category: "Bricks",
        title: "Brick Power II",
        desc: "^x of Realm Level multiplies Brick gain.",
        max: EN(40),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(100000).mul(EN.pow(1.2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 100000, 1.2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100000, 1.2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_2": {
        category: "Bricks",
        title: "Fame to Brick",
        desc: "^x of log(log(log(Fame))) multiplies Brick gain.",
        max: EN(100),
        req: ["f2", 203],
        tease: "Unlocks at Realm Level 204",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(5e9).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 5e9, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 5e9, 2, x) },
        effect(x) { return EN.mul(0.1, x); },
    },
    "b3_3": {
        category: "Bricks",
        title: "Loot to Brick",
        desc: "^x of log(log(Loot)) multiplies Brick gain.",
        max: EN(100),
        req: ["f2", 203],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(5e9).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 5e9, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 5e9, 2, x) },
        effect(x) { return EN.mul(0.1, x); },
    },
    "b3_4": {
        category: "Bricks",
        title: "Fame Exp. to Brick",
        desc: "^x of Fame Exponent multiplies Brick gain.",
        max: EN(20),
        req: ["b4", 20],
        tease: "Unlocks at ^1.00 of Absorb Bonus II",
        teaseReq: ["f2", 199],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e10).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e10, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e10, 2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_5": {
        category: "Bricks",
        title: "Fame Exp. to Brick II",
        desc: "^x of Fame Exponent II multiplies Brick gain.",
        max: EN(20),
        req: ["b4", 20],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e10).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e10, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e10, 2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_6": {
        category: "Bricks",
        title: "Base Loot to Brick",
        desc: "^x of Base Loot multiplies Brick gain.",
        max: EN(20),
        req: ["f2", 233],
        tease: "Unlocks at Realm Level 234",
        teaseReq: ["b4", 20],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e80).mul(EN.pow(1e10, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e80, 1e10, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e80, 1e10, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_7": {
        category: "Bricks",
        title: "Random Loot to Brick",
        desc: "^x of Random Loot multiplies Brick gain.",
        max: EN(20),
        req: ["f2", 233],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e80).mul(EN.pow(1e10, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e80, 1e10, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e80, 1e10, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b4": {
        category: "Abilities",
        title: "Absorb Bonus II",
        desc: "Gain an extra ^x of enemies' Power when killed.",
        req: ["f2", 199],
        tease: "Unlocks at Realm Level 200",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e9).mul(EN.pow(1.1, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e9, 1.1, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e9, 1.1, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b4_1": {
        category: "Abilities",
        title: "Free Loot Upgrades",
        desc: "Fame Upgrades are no longer priced.",
        req: ["f2", 233],
        tease: "Unlocks at Realm Level 234",
        teaseReq: ["b4", 20],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e96); },
    },
    "b4_2": {
        category: "Abilities",
        title: "Loot Operator Up",
        desc: "Loot gained from tiles are multiplied instead of added.",
        req: ["b4_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e98); },
    },
    "b4_3": {
        category: "Abilities",
        title: "WARNING: The Ritual",
        desc: "Unlocks The Grimoire and The Ritual, which allows you to \"reborn\".",
        req: ["f2", 235],
        tease: "Unlocks at Realm Level 236",
        teaseReq: ["f2", 233],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e106); },
    },
    
    "m1": {
        category: "Karma",
        title: "Level Karma",
        desc: "Gain x×sqrt(Realm Level) Karma on level complete.",
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "mana",
        cost(x) { return EN(2).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x; },
    },
    "m1_1": {
        category: "Karma",
        title: "Tower Karma",
        desc: "Gain x×cbrt(Realm Level) Karma on tower complete.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "mana",
        cost(x) { return EN(2).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x.mul(0.3); },
    },
    "m1_2": {
        category: "Karma",
        title: "Player Karma",
        desc: "Gain x Karma on player move.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "mana",
        cost(x) { return EN(2).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x.mul(0.1); },
    },
    
    "k1": {
        category: "Boosts",
        title: "Karma to Fame",
        desc: "Tetrates Fame gain by ↑↑+0.01, additively.",
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(5).add(EN.mul(5, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 5, 5, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 5, 5, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_1": {
        category: "Boosts",
        title: "Karma to Loot",
        desc: "Tetrates Loot gain by ↑↑+0.01, additively.",
        req: ["k1", 1],
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(100).add(EN.mul(100, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 100, 100, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 100, 100, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_2": {
        category: "Boosts",
        title: "Karma to Brick",
        desc: "Tetrates Brick gain by ↑↑+0.01, additively.",
        req: ["k1_1", 1],
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(2000).add(EN.mul(2000, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2000, 2000, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2000, 2000, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_3": {
        category: "Boosts",
        title: "Karma to Mana",
        desc: "Multiplies Mana gain by ×+0.25, additively.",
        req: ["k3_1", 1],
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(1000).mul(EN.pow(1.2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 1.2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 1.2, x) },
        effect(x) { return x.mul(0.25).add(1); },
    },
    "k2": {
        category: "Automation",
        title: "Auto Fame Upgrades",
        desc: "Automatically buy Fame upgrades when you gain Fame.",
        req: ["k3_1", 1],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1000); },
    },
    "k2_1": {
        category: "Automation",
        title: "Auto Loot Upgrades",
        desc: "Automatically buy Loot upgrades when you gain Loot.",
        req: ["k2"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(50000); },
    },
    "k2_2": {
        category: "Automation",
        title: "Auto Brick Upgrades",
        desc: "Automatically buy Brick upgrades when you gain Bricks.",
        req: ["k2_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(2500000); },
    },
    "k3": {
        category: "Abilities",
        title: "Easy Fame",
        desc: "Gain Fame when complete a tower instead of a level.",
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(100); },
    },
    "k3_1": {
        category: "Abilities",
        title: "Easy Bricks",
        desc: "Gain Bricks when complete a tower instead of a level.",
        req: ["k3"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1000); },
    },
}